env.REGION="us-west-1"

def login(command)
{
  result = sh "eval \$(/usr/local/bin/aws ecr get-login --no-include-email --region us-east-1)"
  if (result.length() > 0)
    echo result
  
  return result
}

pipeline {
    agent {
        label 'jenkins-ecs-slave'
    }
    environment { 
        GITURL="https://github.com/sfelinto/stone_challenge"
        CREDENTIALS="57db6742-0251-4c92-b060-9ba078e2dbfa"
        DOCKER_REPO="599405637292.dkr.ecr.${REGION}.amazonaws.com/stone"
    }
    stages {
        stage('Checkout Git on Branch Parameter') {
            when {                
                expression { 
                        params.BRANCH != null
                }
            }
            steps {
                script {       
                git([url: env.GITURL, branch: env.BRANCH, credentialsId: env.CREDENTIALS])
                }
            }      
        }
        stage('Build WebApp Docker Image'){
            steps {
                script {
                    docker.build(env.DOCKER_REPO)
                }
            }   
        } 
        stage('Push Docker Image'){
            when {                
                expression { 
                        params.BRANCH != null
                }
            }
            steps {
                script {
                    
                    def version
                    sh "echo 01-dev-`git log --pretty=format:'%h' -n 1` > version"
                    version = readFile('version').trim()
                    
                    sh "eval \$(aws ecr get-login --no-include-email --region ${REGION})"

                    docker.image(env.DOCKER_REPO).push(version)
                }
            }
        }
        stage('Pull Docker Image'){
            when {                
                expression { 
                        params.BRANCH!= null
                }
            }
            steps {
                script {
                    
                    def version
                    sh "echo 01-dev-`git log --pretty=format:'%h' -n 1` > version"
                    version = readFile('version').trim()
                    sh "eval \$(aws ecr get-login --no-include-email --region ${REGION})"

                    def IMAGE
                    IMAGE = env.DOCKER_REPO+":"+version
                    CLUSTER_NAME = CLUSTER.tokenize(' : ')[1]
                    STACK_NAME = "ecs-stone-site-${CLUSTER_NAME}"

                    // Parameters
                    String parameters = "ParameterKey=ClusterName,ParameterValue=${CLUSTER_NAME} \
                                            ParameterKey=DockerImage,ParameterValue=${IMAGE} \
                                            ParameterKey=SiteTasksNumber,ParameterValue=1 \
                                            ParameterKey=SiteContainerMemorySize,ParameterValue=128"
                                            
                    // Create cloudformation stack
                    sh "aws cloudformation create-stack --capabilities CAPABILITY_NAMED_IAM --region ${REGION} \
                            --template-body file://cloudformation/deploy-site-stone.yml --stack-name ${STACK_NAME} \
                            --parameters ${parameters}"
                    try {
                        sh "timeout 3600 aws cloudformation wait stack-create-complete --region ${REGION} \
                                --stack-name ${STACK_NAME}"
                    } catch(Exception e) {
                        sh "aws cloudformation delete-stack --region ${REGION} --stack-name ${STACK_NAME}" 
                        sh "aws cloudformation wait stack-delete-complete --region ${REGION} \
                                --stack-name ${STACK_NAME}"
                        error("Build failed because encountered an error in cloudformation")
                    }
                }
            }

        }
    }

}
